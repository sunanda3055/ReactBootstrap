'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSwipeable = require('react-swipeable');

var _reactSwipeable2 = _interopRequireDefault(_reactSwipeable);

var _utils = require('./utils');

var Utils = _interopRequireWildcard(_utils);

var _propTypes = require('./propTypes');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AliceCarousel = function (_React$PureComponent) {
  _inherits(AliceCarousel, _React$PureComponent);

  function AliceCarousel(props) {
    _classCallCheck(this, AliceCarousel);

    var _this = _possibleConstructorReturn(this, (AliceCarousel.__proto__ || Object.getPrototypeOf(AliceCarousel)).call(this, props));

    _this._onSlideToIndexChange = function (currentIndex, slideToIndex) {
      if (slideToIndex === currentIndex + 1) {
        _this._slideNext();
      } else if (slideToIndex === currentIndex - 1) {
        _this._slidePrev();
      } else {
        _this._onDotClick(slideToIndex);
      }
    };

    _this._onInactiveItem = function () {
      _this._onSlideChange();
      _this._onSlideChanged();
      _this._allowAnimation();
      _this._pause();
    };

    _this._onDotClick = function (itemIndex) {
      if (_this.state.currentIndex === itemIndex || !_this.allowAnimation || _this.swipeAnimation) {
        return;
      }
      _this._disableAnimation();
      _this._isFadeOutAnimationAllowed() && _this._setAnimationPropsOnDotsClick(itemIndex);
      _this.props.disableAutoPlayOnAction && _this._pause();
      _this._slideToItem(itemIndex);
    };

    _this._windowResizeHandler = function () {
      if (Utils.shouldCallHandlerOnWindowResize(_this.deviceInfo)) {
        var _this$state = _this.state,
            currentIndex = _this$state.currentIndex,
            isPlaying = _this$state.isPlaying;


        _this._pause();
        _this._resetAllIntermediateProps();
        _this._disableAnimation();
        _this.deviceInfo = Utils.deviceInfo();

        var currState = Utils.calculateInitialProps(_this.props, _this.stageComponent);
        var translate3d = Utils.getTranslate3dPosition(currentIndex, currState);
        var nextState = _extends({}, currState, { currentIndex: currentIndex, translate3d: translate3d });

        _this.setState(nextState, function () {
          _this.props.autoPlay && isPlaying && _this._play();
          _this._allowAnimation();
        });
      }
    };

    _this._recalculateFadeOutAnimationState = function (shouldRecalculate) {
      if (shouldRecalculate || _this._isFadeOutAnimationAllowed()) {
        return { fadeoutAnimationProcessing: false };
      }
      return {};
    };

    _this._getStageComponentNode = function (node) {
      return _this.stageComponent = node;
    };

    _this._allowAnimation = function () {
      return _this.allowAnimation = true;
    };

    _this._disableAnimation = function () {
      return _this.allowAnimation = false;
    };

    _this._isHovered = function () {
      return _this.isHovered;
    };

    _this._skipSlidePositionRecalculation = function () {
      if (_this._isFadeOutAnimationAllowed()) {
        _this._resetFadeOutAnimationState();
        return;
      }

      _this._onSlideChanged();
      _this.props.disableAutoPlayOnAction && _this._pause();
      _this.isHovered = false;
    };

    _this._updateSlidePosition = function () {
      window.setTimeout(function () {
        if (_this._shouldRecalculatePosition()) {
          _this._recalculateSlidePosition();
        } else if (_this._isFadeOutAnimationAllowed()) {
          _this._resetFadeOutAnimationState();
        } else {
          _this._onSlideChanged();
        }
      }, _this.state.duration);
    };

    _this._shouldRecalculatePosition = function () {
      var _this$state2 = _this.state,
          slides = _this$state2.slides,
          currentIndex = _this$state2.currentIndex;

      return currentIndex < 0 || currentIndex >= slides.length;
    };

    _this._resetFadeOutAnimationState = function () {
      _this.setState({ fadeoutAnimationProcessing: false }, _this._onSlideChanged);
    };

    _this._resetAllIntermediateProps = function () {
      _this.swipingStarted = false;
      _this.touchEventsCallstack = [];
      _this.verticalSwipingDetected = false;

      _this._allowAnimation();
      _this._stopSwipeAnimation();
      _this._resetAnimationProps();
      _this._resetSwipePositionProps();
      _this._resetTranslateAnimationProcessingFlag();
    };

    _this._recalculateSlidePosition = function () {
      var currentIndex = Utils.recalculateCurrentSlideIndex(_this.state);
      var translate3d = Utils.recalculateTranslatePosition(_this.state);

      _this.setState(_extends({
        currentIndex: currentIndex,
        translate3d: translate3d
      }, _this._recalculateFadeOutAnimationState(), {
        style: { transition: 'transform 0ms ease-out' }
      }), function () {
        return _this._onSlideChanged();
      });
    };

    _this._slideIndexInfoComponent = function () {
      var _this$state3 = _this.state,
          currentIndex = _this$state3.currentIndex,
          slides = _this$state3.slides;

      var _Utils$getSlideInfo = Utils.getSlideInfo(currentIndex, slides.length),
          slideIndex = _Utils$getSlideInfo.slideIndex,
          slidesLength = _Utils$getSlideInfo.slidesLength;

      return _react2.default.createElement(
        'div',
        { className: 'alice-carousel__slide-info' },
        _react2.default.createElement(
          'span',
          { className: 'alice-carousel__slide-info-item' },
          slideIndex
        ),
        _react2.default.createElement(
          'span',
          { className: 'alice-carousel__slide-info-item alice-carousel__slide-info-item--separator' },
          '/'
        ),
        _react2.default.createElement(
          'span',
          { className: 'alice-carousel__slide-info-item' },
          slidesLength
        )
      );
    };

    _this._getActiveSlideIndex = function () {
      var _this$state4 = _this.state,
          slides = _this$state4.slides,
          items = _this$state4.items,
          currentIndex = _this$state4.currentIndex;

      var _Utils$isInactiveItem = Utils.isInactiveItem(_this.state),
          inactiveNext = _Utils$isInactiveItem.inactiveNext;

      return Utils.getActiveSlideIndex(inactiveNext, currentIndex, items, slides.length);
    };

    _this._setAnimationPropsOnDotsClick = function (itemIndex) {
      var _this$state5 = _this.state,
          currentIndex = _this$state5.currentIndex,
          itemWidth = _this$state5.itemWidth;

      var fadeOutIndex = currentIndex + 1;
      var fadeOutOffset = Utils.getFadeOutOffset(itemIndex, currentIndex, itemWidth);

      _this._setAnimationProps({ fadeOutIndex: fadeOutIndex, fadeOutOffset: fadeOutOffset, allowFadeOutAnimation: true });
    };

    _this._getItemIndexForDotNavigation = function (i, dotsLength) {
      var _this$state6 = _this.state,
          slides = _this$state6.slides,
          items = _this$state6.items,
          infinite = _this$state6.infinite;

      var isNotInfinite = infinite === false;

      return isNotInfinite && i === dotsLength - 1 ? slides.length - items : i * items;
    };

    _this._pause = function () {
      if (_this._autoPlayIntervalId) {
        window.clearInterval(_this._autoPlayIntervalId);
        _this._autoPlayIntervalId = null;
        _this.setState({ isPlaying: false });
      }
    };

    _this._playPauseToggle = function () {
      if (!_this.allowAnimation) return;
      _this.state.isPlaying ? _this._pause() : _this._play();
    };

    _this._keyUpHandler = function (e) {
      switch (e.keyCode) {
        case 32:
          return _this._playPauseToggle();
        case 37:
          return _this._slidePrev();
        case 39:
          return _this._slideNext();
      }
    };

    _this._intermediateStateProps = function (duration, shouldSkipRecalculation) {
      var condition = _this._isFadeOutAnimationAllowed() && !shouldSkipRecalculation;
      return Utils.intermediateTransitionProps(condition, duration);
    };

    _this._isFadeOutAnimationAllowed = function () {
      var _this$state7 = _this.state,
          stagePadding = _this$state7.stagePadding,
          items = _this$state7.items;
      var paddingLeft = stagePadding.paddingLeft,
          paddingRight = stagePadding.paddingRight;


      return _this.props.fadeOutAnimation && !(paddingLeft || paddingRight) && items === 1;
    };

    _this._isSwipeDisable = function () {
      return _this.props.swipeDisabled || _this.state.fadeOutAnimation || _this.verticalSwipingDetected;
    };

    _this._addTouchEventToCallstack = function () {
      _this.touchEventsCallstack.push(1);
    };

    _this._removeTouchEventFromCallstack = function () {
      _this.touchEventsCallstack.pop();
    };

    _this._setTranslateAnimationProcessingFlag = function () {
      _this.translateAnimationProcessing = true;
    };

    _this._resetTranslateAnimationProcessingFlag = function () {
      _this.translateAnimationProcessing = false;
    };

    _this._startSwipeAnimation = function () {
      _this.swipeAnimation = true;
    };

    _this._stopSwipeAnimation = function () {
      _this.swipeAnimation = false;
    };

    _this._setAnimationProps = function (newProps) {
      var prevProps = _this.animationProps || {};
      _this.animationProps = _extends({}, prevProps, newProps);
    };

    _this._resetAnimationProps = function () {
      _this.animationProps = {};
    };

    _this._setSwipePositionProps = function (newProps) {
      var prevProps = _this.swipePosition || {};
      _this.swipePosition = _extends({}, prevProps, newProps);
    };

    _this._resetSwipePositionProps = function () {
      _this.swipePosition = {};
    };

    _this._calculateSwipeIndex = function () {
      var itemWidth = _this.state.itemWidth;

      var swipePosition = Math.abs(_this.swipePosition.position);

      return _this.swipePosition.direction === 'LEFT' ? Math.floor(swipePosition / itemWidth) + 1 : Math.floor(swipePosition / itemWidth);
    };

    _this._getTranslateXPosition = function () {
      var translate3d = _this.state.translate3d;
      var _this$swipePosition$s = _this.swipePosition.startPosition,
          startPosition = _this$swipePosition$s === undefined ? translate3d : _this$swipePosition$s;


      if (!!_this.touchEventsCallstack.length && _this.translateAnimationProcessing) {
        _this._resetTranslateAnimationProcessingFlag();
        var lastTranslateXPosition = Utils.getTranslateX(_this.stageComponent);

        if (lastTranslateXPosition) {
          return lastTranslateXPosition;
        }
      }

      return startPosition;
    };

    _this._getStartSwipePositionOnTouchMove = function (deltaX) {
      return _this._getTranslateXPosition() - deltaX;
    };

    _this._onTouchEnd = function () {
      _this.swipingStarted = false;
      if (_this._isSwipeDisable()) {
        return;
      }

      _this._addTouchEventToCallstack();
      _this._setSwipePositionProps({ startPosition: _this.swipePosition.position });
      _this._beforeTouchEnd();
    };

    _this._onMouseEnterAutoPlayHandler = function () {
      if (_this.props.stopAutoPlayOnHover) {
        _this.isHovered = true;
      }
    };

    _this._onMouseLeaveAutoPlayHandler = function () {
      _this.isHovered = false;
    };

    _this._setAnimationPropsOnPrevNextClick = function () {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'next';
      var _this$state8 = _this.state,
          currentIndex = _this$state8.currentIndex,
          itemWidth = _this$state8.itemWidth;


      var fadeOutIndex = currentIndex === 0 ? 1 : currentIndex + 1;
      var fadeOutOffset = direction === 'next' ? itemWidth : -itemWidth;

      _this._setAnimationProps({ fadeOutIndex: fadeOutIndex, fadeOutOffset: fadeOutOffset, allowFadeOutAnimation: true });
    };

    _this._slidePrev = function () {
      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (!_this.allowAnimation || _this.swipeAnimation) {
        return;
      }

      _this._disableAnimation();

      var _Utils$isInactiveItem2 = Utils.isInactiveItem(_this.state),
          inactivePrev = _Utils$isInactiveItem2.inactivePrev;

      if (_this._isFadeOutAnimationAllowed()) {
        _this._setAnimationPropsOnPrevNextClick('prev');
      }

      if (inactivePrev) {
        _this._onInactiveItem();
        return;
      }

      if (action && _this.props.disableAutoPlayOnAction) {
        _this._pause();
      }

      _this._slideToItem(_this.state.currentIndex - 1);
    };

    _this._slideNext = function () {
      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (!_this.allowAnimation || _this.swipeAnimation) {
        return;
      }
      _this._disableAnimation();

      var _Utils$isInactiveItem3 = Utils.isInactiveItem(_this.state),
          inactiveNext = _Utils$isInactiveItem3.inactiveNext;

      if (inactiveNext) {
        _this._onInactiveItem();
        return;
      }

      if (action && _this.props.disableAutoPlayOnAction) {
        _this._pause();
      }

      if (_this._isFadeOutAnimationAllowed()) {
        _this._setAnimationPropsOnPrevNextClick('next');
      }

      _this._slideToItem(_this.state.currentIndex + 1);
    };

    _this._renderStageItem = function (item, i) {
      var itemStyle = Utils.itemStyles(i, _this.state, _this.animationProps);
      var itemClassName = Utils.itemClassName(i, _this.state, _this.animationProps);

      return _react2.default.createElement(
        'li',
        { style: itemStyle, className: itemClassName, key: i },
        item
      );
    };

    _this.state = {
      clones: [],
      currentIndex: 1,
      stagePadding: {},
      duration: props.duration,
      slides: Utils.getSlides(props),
      style: { transition: 'transform 0ms ease-out' }
    };

    _this._onTouchMove = _this._onTouchMove.bind(_this);
    _this.handleOnResize = Utils.debounce(_this._windowResizeHandler, 100);
    return _this;
  }

  _createClass(AliceCarousel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._setInitialState();
      this._resetAllIntermediateProps();

      window.addEventListener('resize', this.handleOnResize);

      if (!this.props.keysControlDisabled) {
        window.addEventListener('keyup', this._keyUpHandler);
      }

      this.deviceInfo = Utils.deviceInfo();
      this.props.autoPlay && this._play();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var slideToIndex = nextProps.slideToIndex,
          duration = nextProps.duration,
          startIndex = nextProps.startIndex,
          fadeOutAnimation = nextProps.fadeOutAnimation;


      if (this.props.duration !== duration) {
        this.setState({ duration: duration });
      }

      if (this.props.fadeOutAnimation !== fadeOutAnimation) {
        this.setState({ fadeoutAnimationProcessing: false }, this._resetAnimationProps);
      }

      if (slideToIndex !== this.props.slideToIndex) {
        this._onSlideToIndexChange(this.state.currentIndex, slideToIndex);
      }

      if (this.props.startIndex !== startIndex && slideToIndex === this.props.slideToIndex) {
        this._slideToItem(startIndex);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.disableAutoPlayOnAction !== prevProps.disableAutoPlayOnAction || this.props.autoPlayDirection !== prevProps.autoPlayDirection || this.props.autoPlayInterval !== prevProps.autoPlayInterval || this.props.infinite !== prevProps.infinite || this.props.autoPlay !== prevProps.autoPlay) {
        this.props.autoPlay ? this._play() : this._pause();
      }

      if (this.props.stagePadding !== prevProps.stagePadding || this.props.responsive !== prevProps.responsive || this.props.infinite !== prevProps.infinite || this.props.items !== prevProps.items) {
        this._resetAllIntermediateProps();
        this.setState(Utils.calculateInitialProps(this.props, this.stageComponent));
      }

      if (this.props.keysControlDisabled !== prevProps.keysControlDisabled) {
        this.props.keysControlDisabled ? window.removeEventListener('keyup', this._keyUpHandler) : window.addEventListener('keyup', this._keyUpHandler);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleOnResize);

      if (!this.props.keysControlDisabled) {
        window.removeEventListener('keyup', this._keyUpHandler);
      }

      if (this._autoPlayIntervalId) {
        window.clearInterval(this._autoPlayIntervalId);
        this._autoPlayIntervalId = null;
      }
    }
  }, {
    key: '_onSlideChange',
    value: function _onSlideChange() {
      if (this.props.onSlideChange) {
        this.props.onSlideChange({
          item: this.state.currentIndex,
          slide: this._getActiveSlideIndex()
        });
      }
    }
  }, {
    key: '_onSlideChanged',
    value: function _onSlideChanged() {
      if (this.props.onSlideChanged) {
        this.props.onSlideChanged({
          item: this.state.currentIndex,
          slide: this._getActiveSlideIndex()
        });
      }
      this._allowAnimation();
    }
  }, {
    key: '_setInitialState',
    value: function _setInitialState() {
      this.setState(Utils.calculateInitialProps(this.props, this.stageComponent));
    }
  }, {
    key: '_checkSlidePosition',
    value: function _checkSlidePosition(shouldSkipRecalculation) {
      this._stopSwipeAnimation();
      this._resetAnimationProps();
      this._resetSwipePositionProps();

      shouldSkipRecalculation ? this._skipSlidePositionRecalculation() : this._updateSlidePosition();
    }
  }, {
    key: '_prevButton',
    value: function _prevButton() {
      var _Utils$isInactiveItem4 = Utils.isInactiveItem(this.state),
          inactivePrev = _Utils$isInactiveItem4.inactivePrev;

      var className = 'alice-carousel__prev-btn-item' + (inactivePrev ? ' __inactive' : '');

      return _react2.default.createElement(
        'div',
        { className: 'alice-carousel__prev-btn' },
        _react2.default.createElement(
          'div',
          {
            className: 'alice-carousel__prev-btn-wrapper',
            onMouseEnter: this._onMouseEnterAutoPlayHandler,
            onMouseLeave: this._onMouseLeaveAutoPlayHandler
          },
          _react2.default.createElement(
            'p',
            { className: className, onClick: this._slidePrev },
            _react2.default.createElement('span', { 'data-area': 'Prev' })
          )
        )
      );
    }
  }, {
    key: '_nextButton',
    value: function _nextButton() {
      var _Utils$isInactiveItem5 = Utils.isInactiveItem(this.state),
          inactiveNext = _Utils$isInactiveItem5.inactiveNext;

      var className = 'alice-carousel__next-btn-item' + (inactiveNext ? ' __inactive' : '');

      return _react2.default.createElement(
        'div',
        { className: 'alice-carousel__next-btn' },
        _react2.default.createElement(
          'div',
          {
            className: 'alice-carousel__next-btn-wrapper',
            onMouseEnter: this._onMouseEnterAutoPlayHandler,
            onMouseLeave: this._onMouseLeaveAutoPlayHandler
          },
          _react2.default.createElement(
            'p',
            { className: className, onClick: this._slideNext },
            _react2.default.createElement('span', { 'data-area': 'Next' })
          )
        )
      );
    }
  }, {
    key: '_renderDotsNavigation',
    value: function _renderDotsNavigation() {
      var _this2 = this;

      var _state = this.state,
          slides = _state.slides,
          items = _state.items;

      var dotsLength = Utils.getDotsCeilLength(slides.length, items);

      return _react2.default.createElement(
        'ul',
        { className: 'alice-carousel__dots' },
        slides.map(function (item, i) {
          if (i < dotsLength) {
            var itemIndex = _this2._getItemIndexForDotNavigation(i, dotsLength);
            var className = _this2._getActiveSlideIndex() === i ? ' __active' : '';
            return _react2.default.createElement('li', {
              key: i,
              onClick: function onClick() {
                return _this2._onDotClick(itemIndex);
              },
              onMouseEnter: _this2._onMouseEnterAutoPlayHandler,
              onMouseLeave: _this2._onMouseLeaveAutoPlayHandler,
              className: 'alice-carousel__dots-item' + className
            });
          }
        })
      );
    }
  }, {
    key: '_renderPlayPauseButton',
    value: function _renderPlayPauseButton() {
      return _react2.default.createElement(
        'div',
        { className: 'alice-carousel__play-btn' },
        _react2.default.createElement(
          'div',
          { className: 'alice-carousel__play-btn-wrapper' },
          _react2.default.createElement('div', {
            onClick: this._playPauseToggle,
            className: 'alice-carousel__play-btn-item' + (this.state.isPlaying ? ' __pause' : '')
          })
        )
      );
    }
  }, {
    key: '_play',
    value: function _play() {
      var _this3 = this;

      var duration = this.state.duration;
      var _props = this.props,
          autoPlayDirection = _props.autoPlayDirection,
          autoPlayInterval = _props.autoPlayInterval;

      var playInterval = Math.max(autoPlayInterval || duration, duration);

      this.setState({ isPlaying: true });

      if (!this._autoPlayIntervalId) {
        this._autoPlayIntervalId = window.setInterval(function () {
          if (!_this3._isHovered() && _this3._autoPlayIntervalId && _this3.state.isPlaying) {
            autoPlayDirection === 'rtl' ? _this3._slidePrev(false) : _this3._slideNext(false);
          }
        }, playInterval);
      }
    }
  }, {
    key: '_slideToItem',
    value: function _slideToItem(index) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._onSlideChange();
      var _options$duration = options.duration,
          duration = _options$duration === undefined ? this.state.duration : _options$duration,
          _options$shouldSkipRe = options.shouldSkipRecalculation,
          shouldSkipRecalculation = _options$shouldSkipRe === undefined ? false : _options$shouldSkipRe;

      var translate3d = Utils.getTranslate3dPosition(index, this.state);

      this.setState(_extends({
        currentIndex: index,
        translate3d: translate3d
      }, this._intermediateStateProps(duration, shouldSkipRecalculation)), function () {
        return _this4._checkSlidePosition(shouldSkipRecalculation);
      });
    }
  }, {
    key: '_onTouchMove',
    value: function _onTouchMove(e, deltaX, deltaY) {
      this.swipingStarted = true;
      this._onMouseEnterAutoPlayHandler();

      if (Utils.isVerticalTouchMoveDetected(e, deltaX, deltaY)) {
        this.verticalSwipingDetected = true;
        return;
      } else {
        this.verticalSwipingDetected = false;
      }

      if (this._isSwipeDisable()) {
        return;
      }

      this._disableAnimation();
      this._startSwipeAnimation();

      var _state2 = this.state,
          slides = _state2.slides,
          items = _state2.items,
          itemWidth = _state2.itemWidth,
          infinite = _state2.infinite,
          stagePadding = _state2.stagePadding;

      var slidesLength = slides.length;
      var direction = Utils.getSwipeDirection(deltaX);
      var position = this._getStartSwipePositionOnTouchMove(deltaX);

      if (infinite === false) {
        var leftTranslateLimit = Utils.getLeftTranslateLimit(items, itemWidth);
        var rightTranslateLimit = Utils.getRightTranslateLimit(slidesLength, itemWidth);

        if (position > leftTranslateLimit || position < rightTranslateLimit) {
          return;
        }

        Utils.animate(this.stageComponent, position);
        this._setSwipePositionProps({ position: position, direction: direction });
        return;
      }

      var maxPosition = Utils.getMaxSWipePosition(items, itemWidth, slidesLength);
      var limitMinPos = Utils.getSwipeMinLimit(itemWidth, stagePadding);
      var limitMaxPos = Utils.getSwipeMaxLimit(itemWidth, maxPosition, stagePadding);

      if (position >= 0 - limitMinPos || Math.abs(position) >= limitMaxPos) {
        try {
          recalculatePosition();
        } catch (err) {
          Utils.debug(err);
        }
      }

      Utils.animate(this.stageComponent, position);
      this._setSwipePositionProps({ position: position, direction: direction });

      function recalculatePosition() {
        direction === 'RIGHT' ? position += slidesLength * -itemWidth : position += maxPosition - items * itemWidth;

        if (position >= 0 - limitMinPos || Math.abs(position) >= limitMaxPos) {
          try {
            recalculatePosition();
          } catch (err) {
            Utils.debug(err);
          }
        }
      }
    }
  }, {
    key: '_beforeTouchEnd',
    value: function _beforeTouchEnd() {
      var _this5 = this;

      var _state3 = this.state,
          itemWidth = _state3.itemWidth,
          items = _state3.items,
          duration = _state3.duration,
          infinite = _state3.infinite;

      var swipeIndex = this._calculateSwipeIndex();
      var currentIndex = swipeIndex - items;
      var translateXPosition = swipeIndex * -itemWidth;

      if (infinite === false) {
        this._isInfiniteModeDisabledBeforeTouchEnd(swipeIndex, currentIndex);
        return;
      }

      Utils.animate(this.stageComponent, translateXPosition, duration);
      this._setTranslateAnimationProcessingFlag();

      setTimeout(function () {
        _this5._removeTouchEventFromCallstack();
        _this5._resetTranslateAnimationProcessingFlag();

        if (!_this5.swipingStarted && _this5.touchEventsCallstack.length === 0) {
          var nextItemIndex = Utils.getNextItemIndexBeforeTouchEnd(translateXPosition, _this5.state);
          var nextTranslateXPosition = Utils.getTranslate3dPosition(nextItemIndex, _this5.state);

          Utils.animate(_this5.stageComponent, nextTranslateXPosition, 0);
          _this5._slideToItem(nextItemIndex, { duration: 0, shouldSkipRecalculation: true });
        }
      }, duration);
    }
  }, {
    key: '_isInfiniteModeDisabledBeforeTouchEnd',
    value: function _isInfiniteModeDisabledBeforeTouchEnd(swipeIndex, currentIndex) {
      var _this6 = this;

      var _state4 = this.state,
          items = _state4.items,
          itemWidth = _state4.itemWidth,
          duration = _state4.duration,
          slides = _state4.slides;

      var position = Utils.getTranslate3dPosition(currentIndex, { itemWidth: itemWidth, items: items });

      if (swipeIndex < items) {
        currentIndex = 0;
        position = items * -itemWidth;
      }

      if (swipeIndex > slides.length) {
        currentIndex = slides.length - items;
        position = slides.length * -itemWidth;
      }

      Utils.animate(this.stageComponent, position, duration);
      this._setTranslateAnimationProcessingFlag();

      setTimeout(function () {
        _this6._removeTouchEventFromCallstack();
        _this6._resetTranslateAnimationProcessingFlag();

        if (!_this6.swipingStarted && _this6.touchEventsCallstack.length === 0) {
          Utils.animate(_this6.stageComponent, position);
          _this6._slideToItem(currentIndex, { duration: 0, shouldSkipRecalculation: true });
        }
      }, duration);
    }
  }, {
    key: 'render',
    value: function render() {
      var _state5 = this.state,
          style = _state5.style,
          translate3d = _state5.translate3d,
          clones = _state5.clones;

      var stagePadding = Utils.getStagePadding(this.props);
      var stageStyle = Utils.stageStyle(style, translate3d);
      var wrapperStyle = Utils.wrapperStyle(stagePadding);

      return _react2.default.createElement(
        'div',
        { className: 'alice-carousel' },
        _react2.default.createElement(
          _reactSwipeable2.default,
          {
            rotationAngle: 3,
            stopPropagation: true,
            onSwiping: this._onTouchMove,
            onSwiped: this._onTouchEnd,
            trackMouse: this.props.mouseDragEnabled,
            preventDefaultTouchmoveEvent: this.props.preventEventOnTouchMove
          },
          _react2.default.createElement(
            'div',
            {
              style: wrapperStyle,
              className: 'alice-carousel__wrapper',
              onMouseEnter: this._onMouseEnterAutoPlayHandler,
              onMouseLeave: this._onMouseLeaveAutoPlayHandler
            },
            _react2.default.createElement(
              'ul',
              { style: stageStyle, className: 'alice-carousel__stage', ref: this._getStageComponentNode },
              clones.map(this._renderStageItem)
            )
          )
        ),
        this.props.showSlideInfo ? this._slideIndexInfoComponent() : null,
        !this.props.dotsDisabled ? this._renderDotsNavigation() : null,
        !this.props.buttonsDisabled ? this._prevButton() : null,
        !this.props.buttonsDisabled ? this._nextButton() : null,
        this.props.playButtonEnabled ? this._renderPlayPauseButton() : null
      );
    }
  }]);

  return AliceCarousel;
}(_react2.default.PureComponent);

exports.default = AliceCarousel;


AliceCarousel.propTypes = _extends({}, _propTypes.propTypes);
AliceCarousel.defaultProps = _extends({}, _propTypes.defaultProps);
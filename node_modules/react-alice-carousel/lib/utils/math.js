"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getDotsLength = function getDotsLength(slidesLength, items) {
  if (Number(items) !== 0) {
    return slidesLength % items === 0 ? Math.floor(slidesLength / items) - 1 : Math.floor(slidesLength / items);
  }
  return 0;
};

var getActiveSlideIndex = function getActiveSlideIndex(inactiveNext, index, items, slidesLength) {
  var dotsLength = getDotsLength(slidesLength, items);
  var currentIndex = index + items;

  if (items === 1) {
    if (currentIndex < items) {
      return slidesLength - items;
    } else if (currentIndex > slidesLength) {
      return 0;
    } else {
      return currentIndex - 1;
    }
  } else {
    if (currentIndex === slidesLength + items) {
      return 0;
    } else if (inactiveNext || currentIndex < items && currentIndex !== 0) {
      return dotsLength;
    } else if (currentIndex === 0) {
      return slidesLength % items === 0 ? dotsLength : dotsLength - 1;
    } else {
      return Math.floor(currentIndex / items) - 1;
    }
  }
};

var setStartIndex = function setStartIndex(childrenLength, index) {
  var startIndex = index ? Math.abs(Math.ceil(index)) : 0;
  return Math.min(startIndex, childrenLength - 1);
};

var getFadeOutOffset = function getFadeOutOffset(itemIndex, currentIndex, itemWidth) {
  if (itemIndex < currentIndex) {
    return (currentIndex - itemIndex) * -itemWidth;
  } else {
    return (itemIndex - currentIndex) * itemWidth;
  }
};

var getMaxSWipePosition = function getMaxSWipePosition(items, itemWidth, slidesLength) {
  return (slidesLength + items) * itemWidth;
};

var getSwipeMinLimit = function getSwipeMinLimit(itemWidth, _ref) {
  var _ref$paddingLeft = _ref.paddingLeft,
      paddingLeft = _ref$paddingLeft === undefined ? 0 : _ref$paddingLeft;

  return paddingLeft ? itemWidth + paddingLeft : 0;
};

var getSwipeMaxLimit = function getSwipeMaxLimit(itemWidth, maxPosition, _ref2) {
  var _ref2$paddingRight = _ref2.paddingRight,
      paddingRight = _ref2$paddingRight === undefined ? 0 : _ref2$paddingRight;

  return paddingRight ? maxPosition + itemWidth - paddingRight : maxPosition;
};

var getSlideOffset = function getSlideOffset(itemWidth) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;

  return Math.min(itemWidth / 2, offset);
};

var getLeftTranslateLimit = function getLeftTranslateLimit(items, itemWidth) {
  return items * -itemWidth + getSlideOffset(itemWidth);
};

var getRightTranslateLimit = function getRightTranslateLimit(slidesLength, itemWidth) {
  return slidesLength * -itemWidth - getSlideOffset(itemWidth);
};

var getDotsCeilLength = function getDotsCeilLength(slidesLength, items) {
  return Number(items) !== 0 ? Math.ceil(slidesLength / items) : 0;
};

var recalculateCurrentSlideIndex = function recalculateCurrentSlideIndex(_ref3) {
  var slides = _ref3.slides,
      currentIndex = _ref3.currentIndex;

  return currentIndex < 0 ? slides.length - 1 : 0;
};

var recalculateTranslatePosition = function recalculateTranslatePosition(state) {
  var items = state.items,
      itemWidth = state.itemWidth,
      slides = state.slides,
      stagePadding = state.stagePadding;

  var maxSlidePosition = slides.length - 1;
  var currentIndex = state.currentIndex < 0 ? maxSlidePosition : 0;
  var nextIndex = currentIndex === 0 ? items : maxSlidePosition + items;

  if (stagePadding.paddingLeft || stagePadding.paddingRight) {
    return (nextIndex + 1) * -itemWidth;
  }
  return nextIndex * -itemWidth;
};

exports.getActiveSlideIndex = getActiveSlideIndex;
exports.getDotsCeilLength = getDotsCeilLength;
exports.getFadeOutOffset = getFadeOutOffset;
exports.setStartIndex = setStartIndex;
exports.getMaxSWipePosition = getMaxSWipePosition;
exports.getSwipeMinLimit = getSwipeMinLimit;
exports.getSwipeMaxLimit = getSwipeMaxLimit;
exports.getLeftTranslateLimit = getLeftTranslateLimit;
exports.getRightTranslateLimit = getRightTranslateLimit;
exports.recalculateCurrentSlideIndex = recalculateCurrentSlideIndex;
exports.recalculateTranslatePosition = recalculateTranslatePosition;
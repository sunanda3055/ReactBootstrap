'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateInitialProps = exports.setTotalItemsInSlide = undefined;

var _elements = require('./elements');

var _animation = require('./animation');

var _math = require('./math');

var setTotalItemsInSlide = function setTotalItemsInSlide(responsiveConfig, childrenLength) {
  var items = 1;
  if (responsiveConfig) {
    var configKeys = Object.keys(responsiveConfig);

    if (configKeys.length) {
      configKeys.forEach(function (width) {
        if (width < window.innerWidth) {
          items = Math.min(responsiveConfig[width].items, childrenLength) || items;
        }
      });
    }
  }
  return items;
};

var calculateInitialProps = function calculateInitialProps(props, rootComponent) {
  var slides = (0, _elements.getSlides)(props);
  var stagePadding = (0, _elements.getStagePadding)(props);
  var startIndex = props.startIndex,
      responsive = props.responsive,
      infinite = props.infinite;

  var items = setTotalItemsInSlide(responsive, slides.length);
  var currentIndex = (0, _math.setStartIndex)(slides.length, startIndex);
  var galleryWidth = (0, _elements.getElementWidth)(rootComponent);
  var itemWidth = (0, _elements.getItemWidth)(galleryWidth, items);
  var clones = (0, _elements.cloneCarouselItems)(slides, items, { stagePadding: stagePadding, infinite: infinite });
  var translate3d = (0, _animation.getTranslate3dPosition)(currentIndex, { itemWidth: itemWidth, items: items, stagePadding: stagePadding, infinite: infinite });

  return {
    items: items,
    itemWidth: itemWidth,
    currentIndex: currentIndex,
    slides: slides,
    clones: clones,
    infinite: infinite,
    translate3d: translate3d,
    stagePadding: stagePadding
  };
};

exports.setTotalItemsInSlide = setTotalItemsInSlide;
exports.calculateInitialProps = calculateInitialProps;
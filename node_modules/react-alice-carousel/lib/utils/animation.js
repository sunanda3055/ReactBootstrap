'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
function animate(element, position) {
  var durationMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  var prefixes = ['webkit', 'moz', 'ms', 'o', ''];

  if (element) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = prefixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var value = _step.value;

        element.style[value + 'Transition'] = 'transform ' + durationMs + 'ms ease-out';
        element.style[value + 'Transform'] = 'translate3d(' + position + 'px, 0, 0)';
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
}

function getTranslateX(element) {
  var translateXIndex = 4;
  var matrix = getTransformMatrix(element);
  return matrix[translateXIndex];
}

function getTransformMatrix(element) {
  var _ref = element && getComputedStyle && getComputedStyle(element) || {},
      _ref$transform = _ref.transform,
      transform = _ref$transform === undefined ? '' : _ref$transform;

  var matched = transform.match(/[0-9., -]+/) || [];
  if (typeof matched[0] === 'string') {
    return matched[0].split(',');
  }
  return [];
}

var getTranslate3dPosition = function getTranslate3dPosition(currentIndex) {
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var itemWidth = state.itemWidth,
      items = state.items,
      infinite = state.infinite,
      stagePadding = state.stagePadding;


  if (infinite) {
    var paddingLeft = stagePadding.paddingLeft,
        paddingRight = stagePadding.paddingRight;

    if (paddingLeft || paddingRight) {
      currentIndex += 1;
    }
  }

  return (items + currentIndex) * -itemWidth;
};

var isAnimatedItem = function isAnimatedItem(i) {
  var animationProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var allowFadeOutAnimation = animationProps.allowFadeOutAnimation,
      fadeOutIndex = animationProps.fadeOutIndex;

  return allowFadeOutAnimation && fadeOutIndex === i;
};

exports.animate = animate;
exports.getTranslateX = getTranslateX;
exports.getTranslate3dPosition = getTranslate3dPosition;
exports.isAnimatedItem = isAnimatedItem;